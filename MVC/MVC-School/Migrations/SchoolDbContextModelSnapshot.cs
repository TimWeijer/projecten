// <auto-generated />
using MVC_School.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MVC_School.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    partial class SchoolDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MVC_School.Models.Docent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Achternaam")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("LocatieId")
                        .HasColumnType("int");

                    b.Property<string>("Voornaam")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("LocatieId");

                    b.ToTable("Docenten");
                });

            modelBuilder.Entity("MVC_School.Models.Locatie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adres")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Naam")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Woonplaats")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Locaties");
                });

            modelBuilder.Entity("MVC_School.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Achternaam")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Adres")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Voornaam")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Woonplaats")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Studenten");
                });

            modelBuilder.Entity("MVC_School.Models.Vak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocentId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("DocentId");

                    b.ToTable("Vakken");
                });

            modelBuilder.Entity("MVC_School.Models.VakStudent", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("VakId")
                        .HasColumnType("int");

                    b.Property<int>("Uren")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "VakId");

                    b.HasIndex("VakId");

                    b.ToTable("VakStudenten");
                });

            modelBuilder.Entity("MVC_School.Models.Docent", b =>
                {
                    b.HasOne("MVC_School.Models.Locatie", "Locatie")
                        .WithMany("Docenten")
                        .HasForeignKey("LocatieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locatie");
                });

            modelBuilder.Entity("MVC_School.Models.Vak", b =>
                {
                    b.HasOne("MVC_School.Models.Docent", "Docent")
                        .WithMany("Vakken")
                        .HasForeignKey("DocentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Docent");
                });

            modelBuilder.Entity("MVC_School.Models.VakStudent", b =>
                {
                    b.HasOne("MVC_School.Models.Student", "Student")
                        .WithMany("StudentVakken")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_School.Models.Vak", "Vak")
                        .WithMany("VakStudenten")
                        .HasForeignKey("VakId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Vak");
                });

            modelBuilder.Entity("MVC_School.Models.Docent", b =>
                {
                    b.Navigation("Vakken");
                });

            modelBuilder.Entity("MVC_School.Models.Locatie", b =>
                {
                    b.Navigation("Docenten");
                });

            modelBuilder.Entity("MVC_School.Models.Student", b =>
                {
                    b.Navigation("StudentVakken");
                });

            modelBuilder.Entity("MVC_School.Models.Vak", b =>
                {
                    b.Navigation("VakStudenten");
                });
#pragma warning restore 612, 618
        }
    }
}
